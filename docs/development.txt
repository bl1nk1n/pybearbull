Project Structure
--------------------------------------------------------------------------------
pybearbull/
|
+- README
|
+- LICENSE
|
+- .gitignore
|
+- setup.py
|
+- requirements.txt
|
+- Makefile
|
+- pybearbull.py
|
+- pybearbull_venv/     (needs to be set up by user with virtualenv)
|  |
|  +-
|
+- docs/
|  |
|  +-
|
+- pybearbull/
|  |
|  +- __init__.py
|  |
|  +- __main__.py
|  |
|  +- gui/
|  |  |
|  |  +- __init__.py
|  |  |
|  |  +- 
|  |  
|  +- core/
|  |  |
|  |  +- __init__.py
|  |  |
|  |  +- 
|  |
|  +- backend/
|  |  |
|  |  +- __init__.py
|  |  |
|  |  +- 
|  |
|  +-
|
+- tests/
   |
   +- unit/
   |  |
   |  +-
   |
   +- integration/
      |
      +-

Branching Model
--------------------------------------------------------------------------------
- master
        - infinite lifetime; production ready state
- dev
        - infinite lifetime; latest development changes for next release
- hotfixes
        - must branch off of master
        - must merge back into (dev|release) and master
        - name: hotfix-*
        - fix a critical bug; then bump versions and whatnot like a release
        - merged into master and tagged for easier reference
- release branches
        - must branch off of dev
        - must merge back into dev and master
        - name: release-*
        - branch off when dev has enough changes for a release
        - final touches are done before being made a release
                - version bumping
                - cleaning
                - bugfixes
        - merged into master and tagged for easier reference
- feature branches
        - used to develop new features for upcoming or distant releases
        - must branch off of dev
        - must mege back into dev
        - name: anything except master, dev, release-*, hotfix-*
        - typically exist in developer repos only, not remote

master  hotfixes  releases  dev  features
  |                          |
  0 0.0.1                    O
  |\                         |
  | *----------------------. |
  |  \                      \|
  |   *--.                   O------.
  |       \                  |\      \
  |        O                 O *--.   O
  |       / \                |     \  |
  | .----*   *-------------. O      O O
  |/                        \|\     | |
  O 0.0.2                    O *--. O O
  |\                         |     X  |
  | *----.                   O .--* \ O
  |       \                  |/      \|
  |        O                 O        O
  |        |                /|       /
  |        O           .---* | .----*
  |        |          /      |/
  |        O         O       O
  |       / \        |\      |\
  | .----*   *-----. O *---. O *-.
  |/                \|      \|    \
  O 0.0.3            O       O     O
  |                  |       |     |
  |                  O       O     O
  |                 / \      |     |
  | .--------------*   *---. O     O
  |/                        \|     |
  O 1.0.0                    O     O
  |                         /|    /
  |                    .---* | .-*
  |                   O      |/
  |                  / \     O
  | .---------------*   *--. |
  |/                        \|
  O 1.1.0                    O
  |                          |

Versioning Model
--------------------------------------------------------------------------------
- Major incremented when you make incompatible API changes
- Minor incremented when you add functionality that isn't backwards compatible
- Patch incremented when you make backward compatible bug fixes
- additional labels for pre-release and build metadata can be used
        - alpha, beta, release candidate, etc

Testing
--------------------------------------------------------------------------------
- every function needs to be unit tested
- every section of functionality needs to be integration tested
- all the tests should cover all cases of a function
- only the license header and module header need to be included comment-wise
- the testing directories should mirror the source directories

Documentation
--------------------------------------------------------------------------------
- the docs directories should mirror the source directories and each file should
  include a prose style description of each class, function, etc based on the
  docstrings
- All files must include the license header:

################################################################################
# This file is part of the ManBearBull/PyBearBull project.                     #
# Copyright (C) 2020 Sam Hentschel (bl1nk1n) and the PyBearBull Contributors   #
#                                                                              #
# This program is free software: you can redistribute it and/or modify it      #
# under the terms of the GNU Affero General Public License as published by the #
# Free Software Foundation, either version 3 of the License, or (at your       #
# option) any later version.                                                   #
#                                                                              #
# This program is distributed in the hope that it will be useful, but WITHOUT  #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        #
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License #
# for more details.                                                            #
#                                                                              #
# You should have received a copy of the GNU Affero General Public License     #
# along with this program.  If not, see <https://www.gnu.org/licenses/>.       #
################################################################################

- All source files must include docstrings for modules, functions and classes
        - modules
        """
        String that describes what the module does.

        Classes:

                A
                B
                C

        Functions:

                a(num, str) -> object
                b() -> string
                c(str)

        Variables:

                a
                b
                c
        """

        - functions:
        def func(a, b):
                """
                String that describes what the function does.

                Parameters:
                        a (int): description of variable a and its conditions

                        b (str): description of variable b and its conditions

                Returns:
                        foo (object): description of the variable returned and
                                     description of conditions that have to be
                                     met
                        None:         description of conditions that have to be
                                      met
                """
        
        - classes
        class Cls:
                """
                String that describes what the class represents.

                Attributes:
                        var1 (str): descriptino of variable var1

                        var2 (number): description of variable var2

                Methods:
                        func(a (int), b (str)) -> object: description of func()
                """

Release Steps
--------------
- create a new release branch from dev
- update all the version numbers
- document changes in the changelog
- check documentation, testing, commenting, style, etc
- review changes once more
- merge with master
- add tag at that commit for the version
- make release on that tag
